name: Android Test (Multiple API Levels)

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - integration
          - unit
      run_tests:
        description: 'Run Android tests'
        required: true
        default: 'true'
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  android-test:
    if: github.event.inputs.run_tests == 'true'
    name: Android Test (API ${{ matrix.api-level }}, x86_64)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        api-level: [30, 34]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install system images and emulator
      run: |
        echo "Installing system images for API level ${{ matrix.api-level }}..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "system-images;android-${{ matrix.api-level }};google_apis;x86_64"
        echo "Installing emulator..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "emulator"
        echo "Installing platform-tools..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        echo "Verifying installations..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed | grep -E "(system-images|emulator|platform-tools)"

    - name: Install Android NDK
      run: |
        # Install the latest NDK version
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "ndk;27.2.12479018"
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/27.2.12479018" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/27.2.12479018" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/27.2.12479018" >> $GITHUB_ENV

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android,x86_64-linux-android

    - name: Install cargo-ndk
      run: cargo install cargo-ndk

    - name: Install required Rust targets
      run: |
        rustup target add x86_64-linux-android
        rustup target add aarch64-linux-android
        rustup target list --installed | grep android

    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-android-test-x86_64-api${{ matrix.api-level }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-android-test-x86_64-api${{ matrix.api-level }}-
          ${{ runner.os }}-cargo-android-test-x86_64-
          ${{ runner.os }}-cargo-android-test-
          ${{ runner.os }}-cargo-

    - name: Setup Android SDK PATH
      run: |
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "HOME: $HOME"
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/emulator" >> $GITHUB_ENV
        ls -la $ANDROID_SDK_ROOT/
        echo "Setting up Android directories..."
        mkdir -p $HOME/.android
        chmod 755 $HOME/.android
        export ANDROID_AVD_HOME=$HOME/.android/avd
        echo "ANDROID_AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV
        echo "TARGET_ARCH=aarch64" >> $GITHUB_ENV
        echo "EMULATOR_ARCH=x86_64" >> $GITHUB_ENV
        echo "TEST_TYPE=${{ github.event.inputs.test_type || 'all' }}" >> $GITHUB_ENV
        echo "ANDROID_API=${{ matrix.api-level }}" >> $GITHUB_ENV

    - name: Create AVD
      run: |
        echo "Creating AVD for API level ${{ matrix.api-level }}..."
        mkdir -p $HOME/.android/avd
        echo "Checking installed packages..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed
        echo "Checking available system images..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images;android-${{ matrix.api-level }}" | head -5
        echo "Creating AVD with basic configuration..."
        echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager create avd --force -n test-api${{ matrix.api-level }} -k "system-images;android-${{ matrix.api-level }};google_apis;x86_64" --abi google_apis/x86_64 --path $HOME/.android/avd/test-api${{ matrix.api-level }}.avd || {
          echo "First attempt failed, trying alternative method..."
          echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager create avd --force -n test-api${{ matrix.api-level }} -k "system-images;android-${{ matrix.api-level }};google_apis;x86_64"
        }
        echo "Checking AVD creation result..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager list avd
        echo "Checking AVD directory structure..."
        ls -la $HOME/.android/avd/
        if [ -d "$HOME/.android/avd/test-api${{ matrix.api-level }}.avd" ]; then
          echo "AVD directory found:"
          ls -la $HOME/.android/avd/test-api${{ matrix.api-level }}.avd/
        fi

    - name: Start emulator in background
      run: |
        echo "Checking if AVD exists for API level ${{ matrix.api-level }}..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager list avd
        if [ -f "$HOME/.android/avd/test-api${{ matrix.api-level }}.avd/config.ini" ]; then
          echo "AVD config found, starting emulator..."
          nohup $ANDROID_SDK_ROOT/emulator/emulator -avd test-api${{ matrix.api-level }} -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot -wipe-data > emulator.log 2>&1 &
          echo "Emulator started in background"
          sleep 10
          echo "Checking emulator log..."
          cat emulator.log | head -20 || echo "No log yet"
        else
          echo "AVD not found! Cannot start emulator."
          ls -la $HOME/.android/avd/
          exit 1
        fi

    - name: Wait for emulator to be ready
      run: |
        echo "Waiting for device..."
        adb wait-for-device
        echo "Device detected, waiting for boot completion..."
        timeout 300 bash -c 'while [[ -z $(adb shell getprop sys.boot_completed 2>/dev/null | tr -d "\r") ]]; do echo "Waiting for boot..."; sleep 5; done'
        echo "Boot completed, unlocking screen..."
        adb shell input keyevent 82
        echo "Emulator is ready"

    - name: Create REMOTE_ANDROID file
      run: |
        cat > REMOTE_ANDROID << EOF
        x86_64
        x86_64
        /data/rsproperties
        EOF
        echo "Created REMOTE_ANDROID configuration file:"
        cat REMOTE_ANDROID

    - name: Check emulator status before build
      run: |
        echo "Checking emulator status..."
        adb devices -l
        echo "Checking device properties..."
        timeout 10 adb shell "getprop ro.build.version.release" || echo "Property check failed"
        timeout 10 adb shell "whoami" || echo "User check failed"
        echo "Creating test directory on device..."
        adb shell "mkdir -p /data/rsproperties" || echo "Directory creation completed"

    - name: Verify emulator configuration
      run: |
        device_arch=$(adb shell getprop ro.product.cpu.abi)
        target_arch="aarch64"
        android_api="${{ matrix.api-level }}"
        device_sdk=$(adb shell getprop ro.build.version.sdk)

        echo "========================================"
        echo "Emulator Configuration:"
        echo "Emulator architecture: $device_arch"
        echo "Target build architecture: $target_arch"
        echo "Selected API level: $android_api"
        echo "Emulator SDK level: $device_sdk"
        echo "========================================"

        # Note: We're using x86_64 emulator for cross-architecture testing
        if [[ "$device_arch" == "x86_64" ]]; then
          echo "✅ Emulator architecture is x86_64 (for cross-arch testing)"
        else
          echo "⚠️  WARNING: Unexpected emulator architecture: $device_arch"
        fi

        # Check API level compatibility
        if [[ "$device_sdk" -ge "$android_api" ]]; then
          echo "✅ Emulator SDK level ($device_sdk) is compatible with target API ($android_api)"
        else
          echo "⚠️  WARNING: Emulator SDK level ($device_sdk) is lower than target API ($android_api)"
          echo "Some features may not be available"
        fi

        # Display emulator info
        echo "Emulator details:"
        adb shell getprop ro.product.model
        adb shell getprop ro.build.version.release
        adb shell getprop ro.build.display.id

    - name: Prepare Android environment (ndk_prepare)
      run: |
        source envsetup.sh
        ndk_prepare

    - name: Build for Android (ndk_build and ndk_sync)
      run: |
        source envsetup.sh
        ndk_build && ndk_sync

    - name: Copy test executables to Android device
      run: |
        source envsetup.sh
        read_remote_android
        echo "Copying test executables from deps directory..."
        deps_directory="$source_directory/deps"
        if [ -d "$deps_directory" ]; then
          echo "Found deps directory: $deps_directory"
          echo "Looking for rsproperties test executables..."
          find "$deps_directory" -name "*rsproperties*" -type f -executable | grep -E "(test|spec)" | while read test_file; do
            echo "Copying test file: $test_file"
            adb push "$test_file" "$remote_directory/"
          done
          echo "Test executable copy completed"
        else
          echo "deps directory not found: $deps_directory"
          echo "Looking for test binaries in alternative locations..."
          find target -name "*rsproperties*" -type f -executable | grep -E "(test|spec)" | head -5 | while read test_file; do
            echo "Found alternative test file: $test_file"
            adb push "$test_file" "$remote_directory/"
          done
        fi

    - name: Run tests on Android device
      if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'unit'
      run: |
        echo "Looking for rsproperties test executables on API level ${{ matrix.api-level }}..."
        timeout 10 adb shell "ls -la /data/rsproperties/*rsproperties*" || echo "No rsproperties test executables found"
        echo "Finding and running rsproperties test executables..."
        timeout 300 adb shell "
          cd /data/rsproperties
          for test_file in *rsproperties*; do
            if [ -f \"\$test_file\" ] && [ -x \"\$test_file\" ]; then
              echo \"Running rsproperties test: \$test_file\"
              chmod +x \"\$test_file\"
              ./\"\$test_file\" --test-threads=1 || echo \"Test \$test_file completed with errors\"
              echo \"Finished running: \$test_file\"
              echo \"---\"
            fi
          done
        " || echo "rsproperties test execution completed with timeout"
        echo "All rsproperties tests execution attempted on Android API level ${{ matrix.api-level }}"

    - name: Run integration tests
      if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'integration'
      run: |
        echo "Running rsproperties integration tests on Android emulator (API ${{ matrix.api-level }})..."

        # Test basic property access
        echo "Testing basic Android property operations..."
        if adb shell "getprop ro.build.version.release" > /dev/null; then
          android_version=$(adb shell "getprop ro.build.version.release")
          echo "✅ Android version: $android_version"
        else
          echo "❌ Failed to read Android properties"
          exit 1
        fi

        # Test rsproperties-specific property access
        echo "Testing rsproperties functionality..."
        test_props=("ro.build.version.release" "ro.product.model" "ro.build.version.sdk" "ro.hardware")

        for prop in "${test_props[@]}"; do
          echo "Testing rsproperties access to: $prop"
          if value=$(adb shell "getprop $prop" 2>/dev/null) && [ -n "$value" ]; then
            echo "✅ Property $prop = $value"
          else
            echo "⚠️  Property $prop not accessible or empty"
          fi
        done

        echo "✅ rsproperties integration tests completed"

    - name: Collect device logs
      if: always()
      run: |
        echo "========================================"
        echo "rsproperties Test Configuration Summary:"
        echo "Target API level: $ANDROID_API"
        echo "Target build architecture: $TARGET_ARCH"
        echo "Test type: $TEST_TYPE"
        echo "Test scope: rsproperties package only"
        echo "Test environment: Android Emulator"
        echo "========================================"
        echo "Emulator Information:"
        echo "Emulator model: $(adb shell getprop ro.product.model || echo 'Unknown')"
        echo "Android version: $(adb shell getprop ro.build.version.release || echo 'Unknown')"
        echo "SDK version: $(adb shell getprop ro.build.version.sdk || echo 'Unknown')"
        echo "Security patch: $(adb shell getprop ro.build.version.security_patch || echo 'Unknown')"
        echo "Architecture: $(adb shell getprop ro.product.cpu.abi || echo 'Unknown')"
        echo "Supported ABIs: $(adb shell getprop ro.product.cpu.abilist || echo 'Unknown')"
        echo "Available memory:"
        adb shell "cat /proc/meminfo | head -3" || echo "Memory info not available"
        echo "========================================"

    - name: Cleanup device and emulator
      if: always()
      run: |
        echo "========================================"
        echo "Cleaning up test environment..."
        echo "========================================"

        # Clean up test files from emulator
        if [ "$DEVICE_AVAILABLE" = "true" ]; then
          source envsetup.sh
          read_remote_android

          echo "Cleaning up test files from emulator..."
          adb shell "rm -rf $remote_directory" 2>/dev/null || echo "Test directory cleanup completed"
        fi

        # Stop Android emulator gracefully
        echo "Stopping Android emulator..."

        # Try graceful shutdown first
        if adb devices | grep -q "emulator"; then
          echo "Sending kill command to emulator..."
          adb emu kill 2>/dev/null || echo "Emulator kill command completed"
          sleep 5
        fi

        # Force kill emulator process if still running
        if [ -n "$EMULATOR_PID" ] && kill -0 $EMULATOR_PID 2>/dev/null; then
          echo "Force killing emulator process (PID: $EMULATOR_PID)..."
          kill -TERM $EMULATOR_PID 2>/dev/null || true
          sleep 3

          # If still running, use SIGKILL
          if kill -0 $EMULATOR_PID 2>/dev/null; then
            echo "Using SIGKILL to terminate emulator..."
            kill -KILL $EMULATOR_PID 2>/dev/null || true
          fi
        fi

        echo "✅ Android emulator test cleanup completed"
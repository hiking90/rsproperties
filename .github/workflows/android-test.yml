name: Android Device Test

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - integration
          - unit

env:
  CARGO_TERM_COLOR: always

jobs:
  android-device-test:
    name: Android Device Test (API ${{ matrix.android_api }}, aarch64)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        android_api: ['30', '34']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        packages: platform-tools platforms;android-30 platforms;android-34 ndk;26.1.10909125 system-images;android-30;google_apis;arm64-v8a system-images;android-34;google_apis;arm64-v8a emulator

    - name: Install cargo-ndk
      run: cargo install cargo-ndk

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-android-test-aarch64-api${{ matrix.android_api }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-android-test-aarch64-api${{ matrix.android_api }}-
          ${{ runner.os }}-cargo-android-test-aarch64-
          ${{ runner.os }}-cargo-android-test-
          ${{ runner.os }}-cargo-

    - name: Setup environment variables
      run: |
        export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
        export TOP_DIR=$(pwd)
        export ANDROID_AVD_HOME=$HOME/.android/avd
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
        echo "TOP_DIR=$(pwd)" >> $GITHUB_ENV
        echo "ANDROID_AVD_HOME=$HOME/.android/avd" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV
        echo "TARGET_ARCH=aarch64" >> $GITHUB_ENV
        echo "TEST_TYPE=${{ github.event.inputs.test_type || 'all' }}" >> $GITHUB_ENV
        echo "ANDROID_API=${{ matrix.android_api }}" >> $GITHUB_ENV

        # Ensure AVD directory exists
        mkdir -p $HOME/.android/avd

        # Debug environment info
        echo "Environment setup complete:"
        echo "ANDROID_HOME=$ANDROID_HOME"
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_ROOT"
        echo "ANDROID_AVD_HOME=$HOME/.android/avd"

    - name: Create and start Android emulator
      run: |
        # Use ARM64 emulator for aarch64 target
        target_arch="aarch64"
        android_api="${{ matrix.android_api }}"
        emulator_arch="arm64-v8a"
        avd_arch="arm64-v8a"

        avd_name="test_avd_api${android_api}_arm64"

        echo "========================================"
        echo "Creating ARM64 AVD: $avd_name with API $android_api"
        echo "========================================"

        # Debug: Show Android environment
        echo "Android SDK root: $ANDROID_HOME"
        echo "Android AVD path: $ANDROID_AVD_HOME"

        # List existing AVDs before creation
        echo "Existing AVDs before creation:"
        $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd || echo "No existing AVDs"

        # Check if the system image exists
        echo "Checking for system image: system-images;android-${android_api};google_apis;arm64-v8a"
        if ! $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep -q "system-images;android-${android_api};google_apis;arm64-v8a"; then
          echo "❌ ERROR: ARM64 system image for API $android_api not available"
          echo "Available system images:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images" | head -10
          exit 1
        fi
        echo "✅ System image found"

        # Delete existing AVD if it exists
        if $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd | grep -q "$avd_name"; then
          echo "Deleting existing AVD: $avd_name"
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager delete avd -n "$avd_name"
        fi

        # Create AVD with detailed output
        echo "Creating new AVD..."
        if ! echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
          -n "$avd_name" \
          -k "system-images;android-${android_api};google_apis;arm64-v8a" \
          --force; then
          echo "❌ ERROR: Failed to create AVD"
          exit 1
        fi

        # Wait for AVD creation to complete
        sleep 3

        # Verify AVD was created
        echo "Verifying AVD creation..."
        if ! $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd | grep -q "$avd_name"; then
          echo "❌ ERROR: AVD was not created successfully"
          echo "Available AVDs:"
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
          exit 1
        fi
        echo "✅ AVD created successfully"

        # Check AVD directory structure
        avd_dir="$ANDROID_AVD_HOME/${avd_name}.avd"
        echo "AVD directory: $avd_dir"
        if [ -d "$avd_dir" ]; then
          echo "AVD directory contents:"
          ls -la "$avd_dir"
        else
          echo "❌ ERROR: AVD directory not found"
          exit 1
        fi

        # Configure AVD for better CI performance
        config_file="$avd_dir/config.ini"
        if [ -f "$config_file" ]; then
          echo "Configuring AVD for better CI performance..."
          echo "hw.ramSize=2048" >> "$config_file"
          echo "hw.heapSize=512" >> "$config_file"
          echo "hw.camera.back=none" >> "$config_file"
          echo "hw.camera.front=none" >> "$config_file"
          echo "hw.gps=no" >> "$config_file"
          echo "hw.audioInput=no" >> "$config_file"
          echo "hw.audioOutput=no" >> "$config_file"
          echo "hw.keyboard=yes" >> "$config_file"
          echo "hw.gpu.enabled=yes" >> "$config_file"
          echo "hw.gpu.mode=swiftshader_indirect" >> "$config_file"
          echo "✅ AVD configured"
        else
          echo "⚠️  WARNING: config.ini not found at $config_file"
        fi

        # List available emulators before starting
        echo "Available emulators:"
        $ANDROID_HOME/emulator/emulator -list-avds

        # Start emulator in background with better error handling
        echo "Starting ARM64 emulator: $avd_name"
        echo "Emulator command: $ANDROID_HOME/emulator/emulator -avd $avd_name"

        # Start emulator and capture PID
        $ANDROID_HOME/emulator/emulator -avd "$avd_name" \
          -no-snapshot \
          -no-window \
          -no-audio \
          -no-boot-anim \
          -camera-back none \
          -camera-front none \
          -gpu swiftshader_indirect \
          -memory 2048 \
          -partition-size 4096 \
          -verbose > emulator.log 2>&1 &

        emulator_pid=$!
        echo "Emulator started with PID: $emulator_pid"
        echo "EMULATOR_PID=$emulator_pid" >> $GITHUB_ENV

        # Store emulator info for later steps
        echo "AVD_NAME=$avd_name" >> $GITHUB_ENV
        echo "EMULATOR_ARCH=arm64-v8a" >> $GITHUB_ENV

        # Give emulator a moment to initialize
        sleep 5

        # Check if emulator process is still running
        if kill -0 $emulator_pid 2>/dev/null; then
          echo "✅ Emulator process is running"
        else
          echo "❌ ERROR: Emulator process died"
          echo "Emulator log:"
          cat emulator.log
          exit 1
        fi

    - name: Wait for emulator to be ready
      run: |
        echo "========================================"
        echo "Waiting for Android emulator to boot..."
        echo "========================================"

        # Check if emulator process is still running
        if [ -n "$EMULATOR_PID" ] && kill -0 $EMULATOR_PID 2>/dev/null; then
          echo "✅ Emulator process is still running (PID: $EMULATOR_PID)"
        else
          echo "❌ ERROR: Emulator process is not running"
          if [ -f emulator.log ]; then
            echo "Emulator log:"
            cat emulator.log
          fi
          exit 1
        fi

        # Wait for emulator to be detected by adb
        echo "Step 1: Waiting for emulator to be detected by adb..."
        timeout=300  # 5 minutes timeout
        detected=false
        while [ $timeout -gt 0 ]; do
          echo "Checking adb devices... ($timeout seconds remaining)"
          adb devices -l

          if adb devices | grep -q "emulator"; then
            echo "✅ Emulator detected by adb!"
            detected=true
            break
          fi

          # Check if emulator process is still alive
          if ! kill -0 $EMULATOR_PID 2>/dev/null; then
            echo "❌ ERROR: Emulator process died during startup"
            if [ -f emulator.log ]; then
              echo "Last 50 lines of emulator log:"
              tail -50 emulator.log
            fi
            exit 1
          fi

          sleep 10
          timeout=$((timeout - 10))
        done

        if [ "$detected" = "false" ]; then
          echo "❌ ERROR: Emulator not detected by adb after 5 minutes"
          echo "Final adb devices output:"
          adb devices -l
          echo "Emulator process status:"
          if kill -0 $EMULATOR_PID 2>/dev/null; then
            echo "Emulator process is still running"
          else
            echo "Emulator process is dead"
          fi
          if [ -f emulator.log ]; then
            echo "Emulator log:"
            cat emulator.log
          fi
          exit 1
        fi

        # Wait for emulator to fully boot
        echo "Step 2: Waiting for emulator to fully boot..."
        adb wait-for-device
        echo "✅ Device is online, waiting for boot completion..."

        # Wait for boot to complete
        timeout=300
        booted=false
        while [ $timeout -gt 0 ]; do
          boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r\n')
          if [ "$boot_completed" = "1" ]; then
            echo "✅ Emulator boot completed!"
            booted=true
            break
          fi
          echo "Boot in progress... boot_completed=$boot_completed ($timeout seconds remaining)"
          sleep 10
          timeout=$((timeout - 10))
        done

        if [ "$booted" = "false" ]; then
          echo "❌ ERROR: Emulator boot did not complete within 5 minutes"
          echo "Final boot status:"
          adb shell getprop sys.boot_completed 2>/dev/null || echo "Failed to get boot status"
          exit 1
        fi

        # Give it a few more seconds for full initialization
        echo "Step 3: Waiting for full initialization..."
        sleep 15

        # Final verification
        echo "Step 4: Final verification..."
        echo "Device information:"
        adb shell getprop ro.product.model
        adb shell getprop ro.build.version.release
        adb shell getprop ro.product.cpu.abi

        echo "DEVICE_AVAILABLE=true" >> $GITHUB_ENV
        echo "✅ Android emulator is ready for testing!"

    - name: Verify emulator configuration
      run: |
        device_arch=$(adb shell getprop ro.product.cpu.abi)
        target_arch="aarch64"
        android_api="${{ matrix.android_api }}"
        device_sdk=$(adb shell getprop ro.build.version.sdk)

        echo "========================================"
        echo "Emulator Configuration:"
        echo "Emulator architecture: $device_arch"
        echo "Target build architecture: $target_arch"
        echo "Selected API level: $android_api"
        echo "Emulator SDK level: $device_sdk"
        echo "AVD Name: $AVD_NAME"
        echo "========================================"

        # Verify we're using ARM64 emulator for ARM64 target
        if [[ "$device_arch" == "arm64-v8a" ]]; then
          echo "✅ Emulator architecture matches target (ARM64)"
        else
          echo "⚠️  WARNING: Emulator architecture ($device_arch) doesn't match target (arm64-v8a)"
          echo "This may affect test accuracy"
        fi

        # Check API level compatibility
        if [[ "$device_sdk" -ge "$android_api" ]]; then
          echo "✅ Emulator SDK level ($device_sdk) is compatible with target API ($android_api)"
        else
          echo "⚠️  WARNING: Emulator SDK level ($device_sdk) is lower than target API ($android_api)"
          echo "Some features may not be available"
        fi

        # Display emulator info
        echo "Emulator details:"
        adb shell getprop ro.product.model
        adb shell getprop ro.build.version.release
        adb shell getprop ro.build.display.id

    - name: Prepare Android environment (ndk_prepare)
      run: |
        source envsetup.sh
        ndk_prepare

    - name: Build for Android (ndk_build)
      run: |
        source envsetup.sh
        ndk_build

    - name: Build test binaries
      run: |
        source envsetup.sh
        read_remote_android

        echo "Building test binaries for $cargo_ndk_target with API level $ANDROID_API..."

        # Build only rsproperties test binaries without running them
        cargo ndk --no-strip -t $cargo_ndk_target --platform $ANDROID_API test --no-run -p rsproperties

    - name: Sync binaries to device (ndk_sync)
      run: |
        source envsetup.sh
        ndk_sync

    - name: Push test binaries to device
      run: |
        source envsetup.sh
        read_remote_android

        echo "Pushing rsproperties test binaries to device..."

        # Find and push only rsproperties test binaries
        test_binaries=$(find target/$ndk_target-linux-android/debug/deps -name "*rsproperties*" -type f -executable | grep -E "(test|spec)")

        if [ -z "$test_binaries" ]; then
          echo "❌ No rsproperties test binaries found!"
          exit 1
        fi

        for binary in $test_binaries; do
          echo "Pushing test binary: $(basename $binary)"
          adb push "$binary" "$remote_directory/"
        done

    - name: Run unit tests on Android device
      if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'unit'
      run: |
        source envsetup.sh
        read_remote_android

        echo "Running rsproperties unit tests on Android device..."

        # Get list of rsproperties test binaries on device
        test_binaries=$(adb shell "ls $remote_directory/" | grep -E "(test|spec)" | grep rsproperties | head -10)

        if [ -z "$test_binaries" ]; then
          echo "❌ No rsproperties test binaries found on device!"
          exit 1
        fi

        failed_tests=0
        total_tests=0

        for binary in $test_binaries; do
          echo "========================================="
          echo "Running rsproperties test binary: $binary"
          echo "========================================="

          total_tests=$((total_tests + 1))

          # Make binary executable and run it
          adb shell "chmod +x $remote_directory/$binary"

          if timeout 300 adb shell "cd $remote_directory && ./$binary --test-threads=1"; then
            echo "✅ rsproperties test $binary passed"
          else
            echo "❌ rsproperties test $binary failed"
            failed_tests=$((failed_tests + 1))
          fi

          echo ""
        done

        echo "========================================="
        echo "rsproperties Unit Test Summary:"
        echo "Total tests: $total_tests"
        echo "Failed tests: $failed_tests"
        echo "Passed tests: $((total_tests - failed_tests))"
        echo "========================================="

        if [ $failed_tests -gt 0 ]; then
          echo "Some rsproperties unit tests failed on Android device"
          exit 1
        else
          echo "All rsproperties unit tests passed on Android device!"
        fi

    - name: Run integration tests
      if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'integration'
      run: |
        source envsetup.sh
        read_remote_android

        echo "Running rsproperties integration tests on Android emulator (API $ANDROID_API)..."

        # Test basic property access
        echo "Testing basic Android property operations..."

        if adb shell "cd $remote_directory && echo 'Testing emulator connectivity...'" > /dev/null; then
          echo "✅ Emulator communication working"
        else
          echo "❌ Emulator communication failed"
          exit 1
        fi

        # Test property reading functionality using system getprop
        echo "Testing system property reading..."
        if adb shell "getprop ro.build.version.release" > /dev/null; then
          android_version=$(adb shell "getprop ro.build.version.release")
          echo "✅ Android version: $android_version"
        else
          echo "❌ Failed to read Android properties"
          exit 1
        fi

        # Test rsproperties-specific property access
        echo "Testing rsproperties functionality..."
        test_props=("ro.build.version.release" "ro.product.model" "ro.build.version.sdk" "ro.hardware" "ro.serialno")

        for prop in "${test_props[@]}"; do
          echo "Testing rsproperties access to: $prop"
          if value=$(adb shell "getprop $prop" 2>/dev/null) && [ -n "$value" ]; then
            echo "✅ Property $prop = $value"
          else
            echo "⚠️  Property $prop not accessible or empty (this may be expected for some properties)"
          fi
        done

        # API level specific rsproperties tests
        device_sdk=$(adb shell getprop ro.build.version.sdk)
        if [[ "$ANDROID_API" == "30" ]]; then
          echo "Running rsproperties API 30 specific tests..."
          if [[ "$device_sdk" -ge "30" ]]; then
            echo "Testing rsproperties with Android 11+ properties..."
            # Test properties that became available in Android 11
            scoped_storage=$(adb shell "getprop ro.config.scoped_storage" 2>/dev/null || echo "not_available")
            echo "Scoped storage config (via rsproperties): $scoped_storage"
          fi
        elif [[ "$ANDROID_API" == "34" ]]; then
          echo "Running rsproperties API 34 specific tests..."
          if [[ "$device_sdk" -ge "34" ]]; then
            echo "Testing rsproperties with Android 14+ properties..."
            echo "Testing latest Android features compatibility with rsproperties..."
          fi
        fi

        echo "✅ rsproperties integration tests completed"

    - name: Collect device logs
      if: always()
      run: |
        echo "========================================"
        echo "rsproperties Test Configuration Summary:"
        echo "Target API level: $ANDROID_API"
        echo "Target build architecture: $TARGET_ARCH"
        echo "Test type: $TEST_TYPE"
        echo "Test scope: rsproperties package only"
        echo "Test environment: Android Emulator"
        echo "========================================"
        echo "Emulator Information:"
        echo "Emulator model: $(adb shell getprop ro.product.model || echo 'Unknown')"
        echo "Android version: $(adb shell getprop ro.build.version.release || echo 'Unknown')"
        echo "SDK version: $(adb shell getprop ro.build.version.sdk || echo 'Unknown')"
        echo "Security patch: $(adb shell getprop ro.build.version.security_patch || echo 'Unknown')"
        echo "Architecture: $(adb shell getprop ro.product.cpu.abi || echo 'Unknown')"
        echo "Supported ABIs: $(adb shell getprop ro.product.cpu.abilist || echo 'Unknown')"
        echo "Available memory:"
        adb shell "cat /proc/meminfo | head -3" || echo "Memory info not available"
        echo "========================================"

    - name: Cleanup device and emulator
      if: always()
      run: |
        echo "========================================"
        echo "Cleaning up test environment..."
        echo "========================================"

        # Clean up test files from emulator
        if [ "$DEVICE_AVAILABLE" = "true" ]; then
          source envsetup.sh
          read_remote_android

          echo "Cleaning up test files from emulator..."
          adb shell "rm -rf $remote_directory" 2>/dev/null || echo "Test directory cleanup completed"
        fi

        # Stop Android emulator gracefully
        echo "Stopping Android emulator..."

        # Try graceful shutdown first
        if adb devices | grep -q "emulator"; then
          echo "Sending kill command to emulator..."
          adb emu kill 2>/dev/null || echo "Emulator kill command completed"
          sleep 5
        fi

        # Force kill emulator process if still running
        if [ -n "$EMULATOR_PID" ] && kill -0 $EMULATOR_PID 2>/dev/null; then
          echo "Force killing emulator process (PID: $EMULATOR_PID)..."
          kill -TERM $EMULATOR_PID 2>/dev/null || true
          sleep 3

          # If still running, use SIGKILL
          if kill -0 $EMULATOR_PID 2>/dev/null; then
            echo "Using SIGKILL to terminate emulator..."
            kill -KILL $EMULATOR_PID 2>/dev/null || true
          fi
        fi

        echo "✅ Android emulator test cleanup completed"